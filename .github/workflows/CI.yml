# This file is abased on the autogenerated file by maturin v1.5.1
# It is modified to remove some architectures that were failing to build
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # from https://github.com/astral-sh/ruff/blob/main/.github/workflows/release.yaml
  validate-tag:
      name: Validate tag
      runs-on: ubuntu-latest
      # If you don't set an input tag, it's a dry run (no uploads).
      if: ${{ inputs.tag }}
      steps:
        - uses: actions/checkout@v4
          with:
            ref: main # We checkout the main branch to check for the commit
        - name: Check main branch
          if: ${{ inputs.sha }}
          run: |
            # Fetch the main branch since a shallow checkout is used by default
            git fetch origin main --unshallow
            if ! git branch --contains ${{ inputs.sha }} | grep -E '(^|\s)main$'; then
              echo "The specified sha is not on the main branch" >&2
              exit 1
            fi
        - name: Check tag consistency
          run: |
            # Switch to the commit we want to release
            git checkout ${{ inputs.sha }}
            version=$(grep "version = " pyproject.toml | sed -e 's/version = "\(.*\)"/\1/g')
            if [ "${{ inputs.tag }}" != "${version}" ]; then
              echo "The input tag does not match the version from pyproject.toml:" >&2
              echo "${{ inputs.tag }}" >&2
              echo "${version}" >&2
              exit 1
            else
              echo "Releasing ${version}"
            fi
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
            # Build fails using gcc.
            use-zig: '--zig'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter ${{ matrix.platform.use-zig }}
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          # - runner: windows-latest
          #   target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-latest
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, windows, macos, sdist]
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
